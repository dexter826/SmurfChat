rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading other users for search
    }

    // Messages collection (unified for rooms + direct messages)
    // ENCRYPTION SUPPORT: Messages may contain encrypted content (encryptedText, encryptedFileData, encryptedLocationData)
    // Decryption happens at the application level using user credentials and master key
    // Security is maintained through Firebase Authentication and application-level encryption
    match /messages/{messageId} {
      allow read, write: if request.auth != null;
    }

    // Room management
    match /rooms/{roomId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid in resource.data.members ||
         request.auth.uid in request.resource.data.members);
    }

    // Direct messages
    match /directMessages/{messageId} {
      allow read, write: if request.auth != null;
    }

    // Conversations
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null &&
        (request.auth.uid in resource.data.participants ||
         request.auth.uid in request.resource.data.participants);
      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.participants;
    }

    // Friend system
    match /friends/{friendId} {
      allow read, write: if request.auth != null;
    }

    match /friend_requests/{requestId} {
      allow read, write: if request.auth != null;
    }

    // Blocked users
    match /blocked_users/{blockId} {
      allow read, write: if request.auth != null;
    }

    // Votes
    match /votes/{voteId} {
      allow read, write: if request.auth != null;
    }

    // Archived chats
    match /archived_chats/{archiveId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Allow read for non-existent documents if user owns the document ID
      allow read: if request.auth != null && archiveId.matches(request.auth.uid + '_.*');
    }
  }
}
