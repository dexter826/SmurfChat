import { collection, query, where, onSnapshot } from 'firebase/firestore';
import { db } from '../../firebase/config';
import { format, isAfter, isBefore, differenceInMinutes } from 'date-fns';

/**
 * Service qu·∫£n l√Ω nh·∫Øc nh·ªü s·ª± ki·ªán
 * T·ª± ƒë·ªông theo d√µi v√† th√¥ng b√°o khi s·ª± ki·ªán s·∫Øp di·ªÖn ra
 */
class EventReminderService {
    constructor() {
        this.activeReminders = new Map();
        this.unsubscribeEvents = null;
        this.alertProvider = null;
        this.userId = null;
    }

    /**
     * Kh·ªüi t·∫°o service v·ªõi user ID v√† alert provider
     */
    initialize(userId, alertProvider) {
        this.userId = userId;
        this.alertProvider = alertProvider;
        this.startEventMonitoring();
    }

    /**
     * B·∫Øt ƒë·∫ßu theo d√µi s·ª± ki·ªán c·ªßa user
     */
    startEventMonitoring() {
        if (!this.userId || this.unsubscribeEvents) return;

        try {
            const eventsQuery = query(
                collection(db, 'events'),
                where('participants', 'array-contains', this.userId)
            );

            this.unsubscribeEvents = onSnapshot(eventsQuery, (snapshot) => {
                this.handleEventsUpdate(snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                })));
            });
        } catch (error) {
            console.error('L·ªói khi kh·ªüi t·∫°o event monitoring:', error);
        }
    }

    /**
     * X·ª≠ l√Ω c·∫≠p nh·∫≠t danh s√°ch s·ª± ki·ªán
     */
    handleEventsUpdate(events) {
        const now = new Date();
        const upcomingEvents = events.filter(event => {
            if (event.status !== 'active') return false;

            const eventTime = event.datetime?.toDate?.() || new Date(event.datetime);
            const reminderTime = this.calculateReminderTime(eventTime, event.reminderMinutes || 15);

            return isAfter(reminderTime, now) && isBefore(eventTime, new Date(now.getTime() + 24 * 60 * 60 * 1000));
        });

        this.scheduleReminders(upcomingEvents);
    }

    /**
     * T√≠nh th·ªùi gian c·∫ßn nh·∫Øc nh·ªü
     */
    calculateReminderTime(eventTime, reminderMinutes) {
        return new Date(eventTime.getTime() - (reminderMinutes * 60 * 1000));
    }

    /**
     * L√™n l·ªãch nh·∫Øc nh·ªü cho c√°c s·ª± ki·ªán
     */
    scheduleReminders(events) {
        // X√≥a c√°c reminder c≈©
        this.clearAllReminders();

        events.forEach(event => {
            const eventTime = event.datetime?.toDate?.() || new Date(event.datetime);
            const reminderTime = this.calculateReminderTime(eventTime, event.reminderMinutes || 15);

            if (isAfter(reminderTime, new Date())) {
                const timeoutId = setTimeout(() => {
                    this.triggerReminder(event);
                }, reminderTime.getTime() - Date.now());

                this.activeReminders.set(event.id, {
                    timeoutId,
                    event,
                    triggered: false
                });
            }
        });
    }

    /**
     * K√≠ch ho·∫°t nh·∫Øc nh·ªü cho s·ª± ki·ªán
     */
    triggerReminder(event) {
        const eventTime = event.datetime?.toDate?.() || new Date(event.datetime);
        const timeUntilEvent = differenceInMinutes(eventTime, new Date());

        const reminderMessage = this.formatReminderMessage(event, timeUntilEvent);

        // Hi·ªÉn th·ªã th√¥ng b√°o
        if (this.alertProvider?.info) {
            this.alertProvider.info(reminderMessage, 'Nh·∫Øc nh·ªü s·ª± ki·ªán');
        }

        // ƒê√°nh d·∫•u ƒë√£ trigger
        const reminder = this.activeReminders.get(event.id);
        if (reminder) {
            reminder.triggered = true;
        }
    }

    /**
     * Format th√¥ng b√°o nh·∫Øc nh·ªü
     */
    formatReminderMessage(event, minutesUntilEvent) {
        const eventTime = event.datetime?.toDate?.() || new Date(event.datetime);
        const timeStr = format(eventTime, 'HH:mm dd/MM');

        let message = `${event.title}\n‚è∞ ${timeStr}\n`;

        if (minutesUntilEvent <= 60) {
            message += `‚è≥ C√≤n ${minutesUntilEvent} ph√∫t n·ªØa b·∫Øt ƒë·∫ßu`;
        } else {
            const hours = Math.floor(minutesUntilEvent / 60);
            const mins = minutesUntilEvent % 60;
            message += `‚è≥ C√≤n ${hours} gi·ªù ${mins} ph√∫t n·ªØa b·∫Øt ƒë·∫ßu`;
        }

        if (event.description) {
            message += `\nüìù ${event.description}`;
        }

        return message;
    }

    /**
     * X√≥a t·∫•t c·∫£ reminder ƒëang ho·∫°t ƒë·ªông
     */
    clearAllReminders() {
        this.activeReminders.forEach((reminder) => {
            if (reminder.timeoutId) {
                clearTimeout(reminder.timeoutId);
            }
        });
        this.activeReminders.clear();
    }

    /**
     * D·ªçn d·∫πp service
     */
    destroy() {
        if (this.unsubscribeEvents) {
            this.unsubscribeEvents();
            this.unsubscribeEvents = null;
        }
        this.clearAllReminders();
        this.userId = null;
        this.alertProvider = null;
    }
}

// Singleton instance
const eventReminderService = new EventReminderService();

export default eventReminderService;